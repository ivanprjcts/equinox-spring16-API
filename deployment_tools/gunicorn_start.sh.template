#!/bin/bash

NAME="REPLACE_PROGRAM_HERE"                                       # Name of the application
DJANGODIR=REPLACE_DJANGO_PROJECT_DIR_HERE                         # Django project directory
SOCKFILE=REPLACE_RUN_SOCK_FILE_HERE                               # we will communicte using this unix socket
LOGFILE=REPLACE_LOG_FILE_HERE                                     # log file
USER=REPLACE_USER_HERE                                            # the user to run as
GROUP=REPLACE_GROUP_HERE                                          # the group to run as
NUM_WORKERS=3                                                     # how many worker processes should Gunicorn spawn. As a rule-of-thumb set the --workers (NUM_WORKERS) according to the following formula: 2 * CPUs + 1. The idea being, that at any given time half of your workers will be busy doing I/O. For a single CPU machine it would give you 3.
DJANGO_SETTINGS_MODULE=REPLACE_PACKAGE_NAME_HERE.settings         # which settings file should Django use
DJANGO_WSGI_MODULE=REPLACE_PACKAGE_NAME_HERE.wsgi                 # WSGI module name
ACTIVATE_VIRTUALENV=REPLACE_VIRTUALENV_ACTIVATE_HERE

echo "Starting $NAME as `whoami`"

# Activate the virtual environment
cd $DJANGODIR
source $ACTIVATE_VIRTUALENV
export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE
export PYTHONPATH=$DJANGODIR:$PYTHONPATH

# Start your Django Unicorn
# Programs meant to be run under supervisor should not daemonize themselves (do not use --daemon)
gunicorn ${DJANGO_WSGI_MODULE}:application \
  --name $NAME \
  --workers $NUM_WORKERS \
  --user=$USER --group=$GROUP \
  --bind=unix:$SOCKFILE \
  --log-level=debug \
  --log-file=-